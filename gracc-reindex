#!/bin/env python
"""
Reindex gracc records from daily to monthly indices.
"""

from argparse import ArgumentParser
import logging
import requests
import traceback
import re
from elasticsearch import Elasticsearch, RequestsHttpConnection
from elasticsearch.helpers import reindex


logger = logging.getLogger(__name__)

class Processor(object):
    def __init__(self, index, prefix, size=500, close=False, timeout=60):
        self.index = index
        self.prefix = prefix
        self.size = size
        self.close = close

        self.client = Elasticsearch(timeout=timeout,connection_class=RequestsHttpConnection)

    def process(self):
        for idx in self.get_indices(self.index):
            try:
                logger.log(99,'Processing index %s'%idx)
                self.process_index(idx)
            except:
                logger.error('Exception while processing index %s'%idx)
                traceback.print_exc()
                continue

    def process_index(self,index):
        match = re.match(r'.*(\d\d\d\d)\.(\d\d)\.(\d\d)$',index)
        assert match
        t = "{}-{}.{}".format(self.prefix,match.group(1),match.group(2))
        logger.info('reindexing {} to {}'.format(index,t))
        reindex(client=self.client, source_index=index, target_index=t, chunk_size=self.size)
        if self.close:
            logger.log(99,'Closing index %s'%index)
            self.client.indices.close(index)


    def get_indices(self, index_pattern):
        idxs = self.client.indices.get_settings(index=index_pattern)
        return idxs.keys()


if __name__=="__main__":
    parser = ArgumentParser(description='Reindex GRACC records')
    parser.add_argument('source',help='source index pattern (e.g. "gracc.osg.raw-*")')
    parser.add_argument('target',help='target index prefix (e.g. "gracc.osg.raw0")')
    parser.add_argument('--size',help='Record batch size (default 500)',default=500,type=int)
    parser.add_argument('--timeout',help='Elasticsearch read timeout in seconds (default 60)',default=60,type=int)
    parser.add_argument('--close',help='Close index when done processing',action='store_true')
    parser.add_argument('--debug',help='Enable debug logging',action='store_true')
    parser.add_argument('--quiet',help='Disable most logging (ignored if --debug specified)',action='store_true')

    args = parser.parse_args()
    
    logfmt = "%(asctime)s [%(levelname)s %(name)s] %(message)s"
    if args.debug:
        logging.basicConfig(level=logging.DEBUG, format=logfmt)
    elif args.quiet:
        logging.basicConfig(level=logging.ERROR, format=logfmt)
    else:
        logging.basicConfig(level=logging.INFO, format=logfmt)
    logging.addLevelName(99,'UBER')

    processor = Processor(args.source, args.target, args.size, args.close, args.timeout)
    processor.process()
